import { StatusBar } from "expo-status-bar";
import React, { useState, useEffect } from "react";
import {
  StyleSheet,
  Text,
  View,
  Button,
  Alert,
  ActivityIndicator,
} from "react-native";
import { BarCodeScanner } from "expo-barcode-scanner";
import { BarcodeResponse } from "../types/index";
import { useNavigation, useRoute } from "@react-navigation/native";
import { AbsoluteCenter } from "@chakra-ui/react";

export default function BarcodeScanner() {
  const navigation = useNavigation();
  const route = useRoute();
  const data = route.params?.data;
  // const data = route.params?.data;

  const [hasPermission, setHasPermission] = useState(null);
  const [scanned, setScanned] = useState(false);
  const [barcode, setBarcode] = useState<string | null>(null);
  const [title, setTitle] = useState("");
  const [author, setAuthor] = useState<string[]>([]);
  const [published, setPublished] = useState("");
  const [pageCount, setPageCount] = useState("");
  const [bookCover, setBookCover] = useState("");
  const [synopsis, setSynopsis] = useState("");
  const [loading, setLoading] = useState(false);

  const [popUp, setPopUp] = useState(false);

  const newData = {
    ...data,
    title: title,
    author: author,
    published: published,
    pageCount: pageCount,
    bookCover: bookCover,
    synopsis: synopsis,
  };

  // link has to be generated by running ngrok http 8080
  // make sure to update the link after this is run
  const barcodeEndpoint =
    "https://9390-2601-197-a7f-9c20-3cb2-d248-7f7-28c6.ngrok.io/v1/books/";

  const googleEndpoint = "https://www.googleapis.com/books/v1/volumes?q=isbn:";

  const pressHandler = () => {
    // navigation.goBack();
  };

  useEffect(() => {
    const getBarCodeScannerPermissions = async () => {
      const { status } = await BarCodeScanner.requestPermissionsAsync();
      setHasPermission(status === "granted");
    };

    getBarCodeScannerPermissions();
    console.log("wowza", data);
  }, []);

  useEffect(() => {
    fetchData();
  }, [barcode]);

  useEffect(() => {
    if (!popUp && bookCover !== "") {
      console.log(newData);
      Alert.alert(
        "Book Scanned",
        `${title} by ${author} has been scanned! Do you want to see more information?`,
        [
          {
            text: "Cancel",
            onPress: () => {
              console.log("Canceled");
              setPopUp(false);
              setLoading(false);
            },
          },
          {
            text: "Ok",
            onPress: () => {
              console.log("navigating");
              navigation.navigate("BookInfo", {
                data: newData,
              });
            },
          },
        ]
      );
    }
    if (bookCover !== "") {
      setPopUp(true);
    }
  }, [published, author, published, pageCount, synopsis, bookCover]); //

  const fetchData = async () => {
    const bookEndpoint = barcodeEndpoint + barcode;
    if (barcode !== null) {
      console.log(barcode, " -> fetched barcode");
      const resp = await fetch(bookEndpoint);
      const data = await resp.json();
      console.log(JSON.stringify(data));
      const objString =
        '{"id":"","title":"","author":"","isbn_13":"","isbn_10":"","subtitle":"","publish_date":"","page_count":"","synopsis":""}';

      console.log(objString === JSON.stringify(data));
      if (objString === JSON.stringify(data)) {
        await fetchGoogle();
      } else {
        await updateTitleAndAuthor(data);
        await setLargestImage();
      }
    }
  };

  const updateTitleAndAuthor = (book: JSON) => {
    const obj = JSON.parse(JSON.stringify(book));
    setTitle(obj.title);
    setAuthor(obj.author);
    setPublished(obj.published_date);
    setPageCount(obj.page_count);
    setSynopsis(obj.synopsis);
  };

  // <Text style={styles.display}>Barcode: {barcode}</Text>
  // <Text style={styles.display}>Title: {title}</Text>
  // <Text style={styles.display}>Author: {author}</Text>

  const fetchGoogle = async () => {
    const bookEndpoint = googleEndpoint + barcode;
    console.log(barcode, " -> google fetched barcode");
    const resp = await fetch(bookEndpoint);
    const data = await resp.json();
    await updateTitleAndAuthorGoogle(data);
    setBook(data);
  };

  const updateTitleAndAuthorGoogle = (book: any) => {
    const obj = book.items[0].volumeInfo;
    setTitle(obj.title);
    setAuthor(obj.authors);
    setSynopsis(obj.description);
    setPageCount(obj.pageCount);
    setPublished(obj.publishedDate);
    const imageLinks = obj.imageLinks;
    const arr = Object.entries(imageLinks);
    const lastValue = arr[arr.length - 1][1];
    setBookCover(lastValue);
  };

  const setLargestImage = async () => {
    const bookEndpoint = googleEndpoint + barcode;
    console.log(barcode, " -> google fetched barcode");
    const resp = await fetch(bookEndpoint);
    const data = await resp.json();
    const obj = data.items[0].volumeInfo;
    const imageLinks = obj.imageLinks;
    const arr = Object.entries(imageLinks);
    const lastValue = arr[arr.length - 1][1];
    setBookCover(lastValue);
  };

  // TODO; figure out how to type <type> and <data>
  const handleBarCodeScanned = async ({ type, data }: BarcodeResponse) => {
    setScanned(true);
    setLoading(true);
    // check that this is indeed an isbn-13 or isbn-10 barcode
    // setBarcode(data);
    if (type === "org.gs1.EAN-13" && data.substring(0, 3) === "978") {
      // first, try retrieving the barcode from the database data -> retrieve
      // we want to error check this later
      setBarcode(data);
    } else if (type === "org.gs1.EAN-13" && data.substring(0, 3) === "979") {
      setBarcode(data);
    }
  };

  const handleBarcodeConversion = (barcode: string) => {
    // hardcoded length values because this will only be called in instances
    // of conversion of isbn-13 to isbn-10
    let res: string = barcode.substring(3, 12);

    let sum: number = 0;
    let multiplier: number = 10;
    // step 3 of the process
    for (var i = 0; i < 12; i++) {
      let tempNum: number;
      tempNum = +res.substring(i, i + 1) * multiplier;
      multiplier -= 1;
      sum += tempNum;
    }

    // step 4
    const remaind = sum % 11;
    var lastDig = remaind == 0 ? "0" : (11 - remaind).toString();
    res += lastDig;
    return res;
  };

  if (hasPermission === null) {
    return <Text>Requesting for camera permission</Text>;
  }
  if (hasPermission === false) {
    return <Text>No access to camera</Text>;
  }

  return (
    <View style={styles.container}>
      <BarCodeScanner
        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}
        style={styles.barcodeScanner}
      />
      <Text>Scan a Book barcode to get started.</Text>
      {scanned && (
        <Button title={"Tap to Scan Again"} onPress={() => setScanned(false)} />
      )}
      {loading && (
        <View>
          <ActivityIndicator />
          <Text>Loading...</Text>
        </View>
      )}
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
  },
  barcodeScanner: {
    height: "60%",
    width: "100%",
    position: "relative",
    top: -90,
    left: 0,
  },
  display: {
    position: "relative",
    top: 0,
    left: 0,
  },
});
