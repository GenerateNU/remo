package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	//"errors"
	"crypto/rand"
	"database/sql"
	"encoding/hex"
	"fmt"
	"remo/backend/graph/model"
)

// Database connection
var DB, err = DbInitConnection()

// Generates a randomID
func generateID() (string, error) {
	id := make([]byte, 16)
	_, err := rand.Read(id)
	if err != nil {
		return "", err
	}
	return hex.EncodeToString(id), nil
}

// ClassroomSchoolYear is the resolver for the classroom_school_year field.
func (r *classroomResolver) ClassroomSchoolYear(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomSchoolYear - classroom_school_year"))
}

// ClassroomStartDate is the resolver for the classroom_start_date field.
func (r *classroomResolver) ClassroomStartDate(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomStartDate - classroom_start_date"))
}

// ClassroomEndDate is the resolver for the classroom_end_date field.
func (r *classroomResolver) ClassroomEndDate(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomEndDate - classroom_end_date"))
}

// ClassroomName is the resolver for the classroom_name field.
func (r *classroomResolver) ClassroomName(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomName - classroom_name"))
}

// ClassroomSubject is the resolver for the classroom_subject field.
func (r *classroomResolver) ClassroomSubject(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomSubject - classroom_subject"))
}

// ClassroomDisplayName is the resolver for the classroom_display_name field.
func (r *classroomResolver) ClassroomDisplayName(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomDisplayName - classroom_display_name"))
}

// ClassroomAvgLength is the resolver for the classroom_avg_length field.
func (r *classroomResolver) ClassroomAvgLength(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomAvgLength - classroom_avg_length"))
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.BookInput) (*model.Book, error) {

	// Insert the new Book object into the database
	stmt, err := DB.Prepare("INSERT INTO books (story_id, author, cover_image, date_created, date_updated, default_user_id, foreword, editor, illustrator, isbn_10, isbn_13, num_pages, pub_date, copyright_date, edition, synopsis, title, word_count, sub_title, asin) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)")
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	// Get the ID of the last inserted row√•
	var id int64
	err = DB.QueryRow("SELECT LAST_INSERT_ID()").Scan(&id)
	if err != nil {
		return nil, err
	}

	// Increment the ID manually
	id++

	// Execute the insert statement with the incremented ID
	_, err = stmt.Exec(input.StoryID, input.Author, input.CoverImage, input.DateCreated, input.DateUpdated, input.DefaultUserID,
		input.Foreword, input.Editor, input.Illustrator, input.Isbn10, input.Isbn13, input.NumPages, input.PubDate, input.CopyrightDate,
		input.Edition, input.Synopsis, input.Title, input.WordCount, input.SubTitle, input.Asin)

	if err != nil {
		return nil, err
	}

	return &model.Book{}, err

	// KIND OF WORKING IMPLEMENTATION
	// var new_id int
	// id, e := DB.Exec("SELECT COUNT(id) FROM books;")
	// if e != nil {
	// 	panic(e)
	// }

	// id, err := generateID()
	// if err != nil {
	//     return nil, err
	// }

	// if result, ok := id.(sql.Result); ok {
	// 	count64, e2 := result.RowsAffected()
	// 	if e2 != nil {
	// 		panic(e2)
	// 	}
	// 	new_id = int(count64) + 1
	// }

	// _, err := DB.Exec("INSERT INTO books (id, default_user_id) VALUES (?, ?);",
	// 	input.ID, 1)

}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, input model.BookInput) (*model.Book, error) {
	//NEED TO IMPLEMENT: GET BOOK FROM DATABASE
	//UPDATE QUERY
	panic(fmt.Errorf("not implemented: UpdateBook - updateBook"))
	//return nil, errors.New("Requested book to update was not find. Try create new book mutation")
}

// CreateTeacher is the resolver for the createTeacher field.
func (r *mutationResolver) CreateTeacher(ctx context.Context, input model.NewTeacher) (*model.Teacher, error) {
	panic(fmt.Errorf("not implemented: CreateTeacher - createTeacher"))
}

// CreateClassroom is the resolver for the createClassroom field.
func (r *mutationResolver) CreateClassroom(ctx context.Context, input model.NewClassroom) (*model.Classroom, error) {
	panic(fmt.Errorf("not implemented: CreateClassroom - createClassroom"))
}

// CreateStudent is the resolver for the createStudent field.
func (r *mutationResolver) CreateStudent(ctx context.Context, input model.NewStudent) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: CreateStudent - createStudent"))
}

// CreateNewReadingRateResults is the resolver for the createNewReadingRateResults field.
func (r *mutationResolver) CreateNewReadingRateResults(ctx context.Context, input model.NewReadingRateResults) (*model.ReadingRateResult, error) {
	panic(fmt.Errorf("not implemented: CreateNewReadingRateResults - createNewReadingRateResults"))
}

// GetBookByID is the resolver for the getBookByID field.
func (r *queryResolver) GetBookByID(ctx context.Context, id string) (*model.Book, error) {
	var book model.Book

	row := DB.QueryRow("SELECT * FROM books WHERE id = ?", id)

	if err := row.Scan(&book.ID,
		&book.Story_id,
		&book.Author,
		&book.Cover_image,
		&book.Date_created,
		&book.Date_updated,
		&book.Default_user_id,
		&book.Foreword,
		&book.Editor,
		&book.Illustrator,
		&book.Isbn_10,
		&book.Isbn_13,
		&book.Num_pages,
		&book.Pub_date,
		&book.Copyright_date,
		&book.Edition,
		&book.Synopsis,
		&book.Title,
		&book.Word_count,
		&book.Sub_title,
		&book.Asin); err != nil {
		if err == sql.ErrNoRows {
			var mtBook *model.Book
			return mtBook, fmt.Errorf("getBookByID %q: no such book", id)
		}

		return &book, fmt.Errorf("getBookByID %q: %v", id, err)
	}
	return &book, nil
}

// Teachers is the resolver for the teachers field.
func (r *queryResolver) Teachers(ctx context.Context) ([]*model.Teacher, error) {
	panic(fmt.Errorf("not implemented: Teachers - teachers"))
}

// GetUserByID is the resolver for the getUserByID field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	var user model.User

	row := DB.QueryRow("SELECT * FROM user_books WHERE id = ?", id)

	if err := row.Scan(&user.ID,
		&user.FirstName,
		&user.LastName,
		&user.Email); err != nil {
		if err == sql.ErrNoRows {
			var mtUser *model.User
			return mtUser, fmt.Errorf("GetUserByID %q: no such user", id)
		}

		return &user, fmt.Errorf("GetUserByID %q: %v", id, err)
	}
	return &user, nil
}

// Date is the resolver for the date field.
func (r *readingRateResultResolver) Date(ctx context.Context, obj *model.ReadingRateResult) (*string, error) {
	panic(fmt.Errorf("not implemented: Date - date"))
}

// StartTime is the resolver for the start_time field.
func (r *readingRateResultResolver) StartTime(ctx context.Context, obj *model.ReadingRateResult) (*string, error) {
	panic(fmt.Errorf("not implemented: StartTime - start_time"))
}

// EndTime is the resolver for the end_time field.
func (r *readingRateResultResolver) EndTime(ctx context.Context, obj *model.ReadingRateResult) (*string, error) {
	panic(fmt.Errorf("not implemented: EndTime - end_time"))
}

// DateCreated is the resolver for the dateCreated field.
func (r *studentResolver) DateCreated(ctx context.Context, obj *model.Student) (*string, error) {
	panic(fmt.Errorf("not implemented: DateCreated - dateCreated"))
}

// DateUpdated is the resolver for the dateUpdated field.
func (r *studentResolver) DateUpdated(ctx context.Context, obj *model.Student) (*string, error) {
	panic(fmt.Errorf("not implemented: DateUpdated - dateUpdated"))
}

// RtiSrvType is the resolver for the rtiSrvType field.
func (r *studentResolver) RtiSrvType(ctx context.Context, obj *model.Student) (*int, error) {
	panic(fmt.Errorf("not implemented: RtiSrvType - rtiSrvType"))
}

// TestField is the resolver for the test_field field.
func (r *teacherResolver) TestField(ctx context.Context, obj *model.Teacher) (string, error) {
	panic(fmt.Errorf("not implemented: TestField - test_field"))
}

// QtyLabel is the resolver for the qty_label field.
func (r *userBookResolver) QtyLabel(ctx context.Context, obj *model.UserBook) (*int, error) {
	panic(fmt.Errorf("not implemented: QtyLabel - qty_label"))
}

// Classroom returns ClassroomResolver implementation.
func (r *Resolver) Classroom() ClassroomResolver { return &classroomResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// ReadingRateResult returns ReadingRateResultResolver implementation.
func (r *Resolver) ReadingRateResult() ReadingRateResultResolver {
	return &readingRateResultResolver{r}
}

// Student returns StudentResolver implementation.
func (r *Resolver) Student() StudentResolver { return &studentResolver{r} }

// Teacher returns TeacherResolver implementation.
func (r *Resolver) Teacher() TeacherResolver { return &teacherResolver{r} }

// UserBook returns UserBookResolver implementation.
func (r *Resolver) UserBook() UserBookResolver { return &userBookResolver{r} }

type classroomResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type readingRateResultResolver struct{ *Resolver }
type studentResolver struct{ *Resolver }
type teacherResolver struct{ *Resolver }
type userBookResolver struct{ *Resolver }
