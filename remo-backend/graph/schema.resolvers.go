package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"remo/backend/graph/model"
	"strconv"
	"time"
)

// ID is the resolver for the id field.
func (r *bookResolver) ID(ctx context.Context, obj *model.Book) (int, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// StoryID is the resolver for the story_id field.
func (r *bookResolver) StoryID(ctx context.Context, obj *model.Book) (*int, error) {
	panic(fmt.Errorf("not implemented: StoryID - story_id"))
}

// Author is the resolver for the author field.
func (r *bookResolver) Author(ctx context.Context, obj *model.Book) (*string, error) {
	panic(fmt.Errorf("not implemented: Author - author"))
}

// CoverImage is the resolver for the cover_image field.
func (r *bookResolver) CoverImage(ctx context.Context, obj *model.Book) (*string, error) {
	panic(fmt.Errorf("not implemented: CoverImage - cover_image"))
}

// DateCreated is the resolver for the date_created field.
func (r *bookResolver) DateCreated(ctx context.Context, obj *model.Book) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DateCreated - date_created"))
}

// DateUpdated is the resolver for the date_updated field.
func (r *bookResolver) DateUpdated(ctx context.Context, obj *model.Book) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DateUpdated - date_updated"))
}

// Foreword is the resolver for the foreword field.
func (r *bookResolver) Foreword(ctx context.Context, obj *model.Book) (*string, error) {
	panic(fmt.Errorf("not implemented: Foreword - foreword"))
}

// Editor is the resolver for the editor field.
func (r *bookResolver) Editor(ctx context.Context, obj *model.Book) (*string, error) {
	panic(fmt.Errorf("not implemented: Editor - editor"))
}

// Illustrator is the resolver for the illustrator field.
func (r *bookResolver) Illustrator(ctx context.Context, obj *model.Book) (*string, error) {
	panic(fmt.Errorf("not implemented: Illustrator - illustrator"))
}

// Isbn10 is the resolver for the isbn_10 field.
func (r *bookResolver) Isbn10(ctx context.Context, obj *model.Book) (*string, error) {
	panic(fmt.Errorf("not implemented: Isbn10 - isbn_10"))
}

// Isbn13 is the resolver for the isbn_13 field.
func (r *bookResolver) Isbn13(ctx context.Context, obj *model.Book) (*int, error) {
	panic(fmt.Errorf("not implemented: Isbn13 - isbn_13"))
}

// NumPages is the resolver for the num_pages field.
func (r *bookResolver) NumPages(ctx context.Context, obj *model.Book) (*int, error) {
	panic(fmt.Errorf("not implemented: NumPages - num_pages"))
}

// PubDate is the resolver for the pub_date field.
func (r *bookResolver) PubDate(ctx context.Context, obj *model.Book) (*int, error) {
	panic(fmt.Errorf("not implemented: PubDate - pub_date"))
}

// CopyrightDate is the resolver for the copyright_date field.
func (r *bookResolver) CopyrightDate(ctx context.Context, obj *model.Book) (*int, error) {
	panic(fmt.Errorf("not implemented: CopyrightDate - copyright_date"))
}

// Edition is the resolver for the edition field.
func (r *bookResolver) Edition(ctx context.Context, obj *model.Book) (*int, error) {
	panic(fmt.Errorf("not implemented: Edition - edition"))
}

// Synopsis is the resolver for the Synopsis field.
func (r *bookResolver) Synopsis(ctx context.Context, obj *model.Book) (*string, error) {
	panic(fmt.Errorf("not implemented: Synopsis - Synopsis"))
}

// Title is the resolver for the title field.
func (r *bookResolver) Title(ctx context.Context, obj *model.Book) (*string, error) {
	panic(fmt.Errorf("not implemented: Title - title"))
}

// WordCount is the resolver for the word_count field.
func (r *bookResolver) WordCount(ctx context.Context, obj *model.Book) (*int, error) {
	panic(fmt.Errorf("not implemented: WordCount - word_count"))
}

// SubTitle is the resolver for the sub_title field.
func (r *bookResolver) SubTitle(ctx context.Context, obj *model.Book) (*string, error) {
	panic(fmt.Errorf("not implemented: SubTitle - sub_title"))
}

// Asin is the resolver for the asin field.
func (r *bookResolver) Asin(ctx context.Context, obj *model.Book) (*string, error) {
	panic(fmt.Errorf("not implemented: Asin - asin"))
}

// ClassroomSchoolYear is the resolver for the classroom_school_year field.
func (r *classroomResolver) ClassroomSchoolYear(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomSchoolYear - classroom_school_year"))
}

// ClassroomStartDate is the resolver for the classroom_start_date field.
func (r *classroomResolver) ClassroomStartDate(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomStartDate - classroom_start_date"))
}

// ClassroomEndDate is the resolver for the classroom_end_date field.
func (r *classroomResolver) ClassroomEndDate(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomEndDate - classroom_end_date"))
}

// ClassroomName is the resolver for the classroom_name field.
func (r *classroomResolver) ClassroomName(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomName - classroom_name"))
}

// ClassroomSubject is the resolver for the classroom_subject field.
func (r *classroomResolver) ClassroomSubject(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomSubject - classroom_subject"))
}

// ClassroomDisplayName is the resolver for the classroom_display_name field.
func (r *classroomResolver) ClassroomDisplayName(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomDisplayName - classroom_display_name"))
}

// ClassroomAvgLength is the resolver for the classroom_avg_length field.
func (r *classroomResolver) ClassroomAvgLength(ctx context.Context, obj *model.Classroom) (*string, error) {
	panic(fmt.Errorf("not implemented: ClassroomAvgLength - classroom_avg_length"))
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input *model.NewBook) (*model.Book, error) {
	//book := &model.Book{
	//	ID:              input.ID,
	//	Default_user_id: input.DefaultUserID,
	//}
	//
	//n := len(r.Books)
	//if n == 0 {
	//	r.Books = make(map[string]*model.Book)
	//}
	//
	//r.Books[input.ID] = book
	//return r.Books[input.ID], nil
	//panic(fmt.Errorf("not implemented: Teachers - teachers"))

	id := input.ID
	var book model.Book
	book.Default_user_id = input.DefaultUserID

	n := len(r.Resolver.Books)
	if n == 0 {
		r.Resolver.Books = make(map[string]model.Book)
	}

	if id != "" {
		_, ok := r.Resolver.Books[id]
		if !ok {
			return nil, fmt.Errorf("not found")
		}
		r.Resolver.Books[id] = book
	} else {
		// generate unique id
		nid := strconv.Itoa(n + 1)
		book.ID = nid
		r.Resolver.Books[nid] = book
	}

	return &book, nil
}

// CreateTeacher is the resolver for the createTeacher field.
func (r *mutationResolver) CreateTeacher(ctx context.Context, input model.NewTeacher) (*model.Teacher, error) {
	panic(fmt.Errorf("not implemented: CreateTeacher - createTeacher"))
}

// CreateClassroom is the resolver for the createClassroom field.
func (r *mutationResolver) CreateClassroom(ctx context.Context, input model.NewClassroom) (*model.Classroom, error) {
	panic(fmt.Errorf("not implemented: CreateClassroom - createClassroom"))
}

// CreateStudent is the resolver for the createStudent field.
func (r *mutationResolver) CreateStudent(ctx context.Context, input model.NewStudent) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: CreateStudent - createStudent"))
}

// CreateNewReadingRateResults is the resolver for the createNewReadingRateResults field.
func (r *mutationResolver) CreateNewReadingRateResults(ctx context.Context, input model.NewReadingRateResults) (*model.ReadingRateResult, error) {
	panic(fmt.Errorf("not implemented: CreateNewReadingRateResults - createNewReadingRateResults"))
}

// GetBookByID is the resolver for the getBookByID field.
func (r *queryResolver) GetBookByID(ctx context.Context, id string) (*model.Book, error) {
	//for _, book := range r.Books {
	//	if id == book. {
	//		return book, nil
	//	}
	//}
	//return r.Books[id], nil
	panic(fmt.Errorf("not implemented: Teachers - teachers"))
}

// Teachers is the resolver for the teachers field.
func (r *queryResolver) Teachers(ctx context.Context) ([]*model.Teacher, error) {
	panic(fmt.Errorf("not implemented: Teachers - teachers"))
}

// GetUserByID is the resolver for the getUserByID field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	for _, user := range r.users {
		if id == user.ID {
			return user, nil
		}
	}
	//return r.users[id], nil
	panic(fmt.Errorf("not implemented: GetUserByID - getUserByID"))
}

// Date is the resolver for the date field.
func (r *readingRateResultResolver) Date(ctx context.Context, obj *model.ReadingRateResult) (*string, error) {
	panic(fmt.Errorf("not implemented: Date - date"))
}

// StartTime is the resolver for the start_time field.
func (r *readingRateResultResolver) StartTime(ctx context.Context, obj *model.ReadingRateResult) (*string, error) {
	panic(fmt.Errorf("not implemented: StartTime - start_time"))
}

// EndTime is the resolver for the end_time field.
func (r *readingRateResultResolver) EndTime(ctx context.Context, obj *model.ReadingRateResult) (*string, error) {
	panic(fmt.Errorf("not implemented: EndTime - end_time"))
}

// DateCreated is the resolver for the dateCreated field.
func (r *studentResolver) DateCreated(ctx context.Context, obj *model.Student) (*string, error) {
	panic(fmt.Errorf("not implemented: DateCreated - dateCreated"))
}

// DateUpdated is the resolver for the dateUpdated field.
func (r *studentResolver) DateUpdated(ctx context.Context, obj *model.Student) (*string, error) {
	panic(fmt.Errorf("not implemented: DateUpdated - dateUpdated"))
}

// RtiSrvType is the resolver for the rtiSrvType field.
func (r *studentResolver) RtiSrvType(ctx context.Context, obj *model.Student) (*int, error) {
	panic(fmt.Errorf("not implemented: RtiSrvType - rtiSrvType"))
}

// TestField is the resolver for the test_field field.
func (r *teacherResolver) TestField(ctx context.Context, obj *model.Teacher) (string, error) {
	panic(fmt.Errorf("not implemented: TestField - test_field"))
}

// QtyLabel is the resolver for the qty_label field.
func (r *userBookResolver) QtyLabel(ctx context.Context, obj *model.UserBook) (*int, error) {
	panic(fmt.Errorf("not implemented: QtyLabel - qty_label"))
}

// Book returns BookResolver implementation.
func (r *Resolver) Book() BookResolver { return &bookResolver{r} }

// Classroom returns ClassroomResolver implementation.
func (r *Resolver) Classroom() ClassroomResolver { return &classroomResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// ReadingRateResult returns ReadingRateResultResolver implementation.
func (r *Resolver) ReadingRateResult() ReadingRateResultResolver {
	return &readingRateResultResolver{r}
}

// Student returns StudentResolver implementation.
func (r *Resolver) Student() StudentResolver { return &studentResolver{r} }

// Teacher returns TeacherResolver implementation.
func (r *Resolver) Teacher() TeacherResolver { return &teacherResolver{r} }

// UserBook returns UserBookResolver implementation.
func (r *Resolver) UserBook() UserBookResolver { return &userBookResolver{r} }

type bookResolver struct{ *Resolver }
type classroomResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type readingRateResultResolver struct{ *Resolver }
type studentResolver struct{ *Resolver }
type teacherResolver struct{ *Resolver }
type userBookResolver struct{ *Resolver }
