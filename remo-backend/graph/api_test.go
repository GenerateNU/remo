package graph

// query {
//   getBookByISBN(isbn: 9781525303890) {
//     id
//     isbn_13
//     title
//     author
//   }
// }
//   https://a75d-155-33-134-27.ngrok.io -> ngrok http 8080
// postman URL: https://4d49-155-33-132-61.ngrok.io/query
import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"testing"
)

// the url generated by ngrok. Needs to be refreshed every hour
var queryEndpointURL = "https://4d49-155-33-132-61.ngrok.io/query"

// TESTS NEEDED
// accurate get requests
// accurate post requests

// test for getting books by ISBN request
// technically a POST request because we're sending a JSON, but performs the function of a GET request
func TestAPIGetBookByISBN(t *testing.T) {

	// below request and response JSONs were collected from postman
	query := `query {
		getBookByISBN(isbn: 9781525303890) {
			isbn_13
			id
			author
			num_pages
		}
	}`

	request := struct {
		Query string `json:"query"`
	}{Query: query}

	requestBody, err := json.Marshal(request)
	if err != nil {
		t.Errorf("Unable to marshal request into JSON: %q", err)
	}

	response, err := http.Post(queryEndpointURL, "application/json", bytes.NewBuffer(requestBody))
	if err != nil {
		t.Errorf("Unable to complete POST request properly: %q", err)
	}

	defer response.Body.Close()

	var result map[string]interface{}

	err = json.NewDecoder(response.Body).Decode(&result)

	if err != nil {
		t.Errorf("Unable to decode request from JSON: %q", err)
	}

	fmt.Println(result)

	// var expectedResponseJSON = `{"data":{"getBookByISBN":{"isbn_13":9781525303890,"id":"1","author":"Carrie S. Allen","num_pages":304}}}`

	// // isbn_13 of the book we want to retrieve
	// expectedISBN_13 := 9781525303890

	// // call the resolver's GetBookByID method with the requested expectedBookID
	// book, err := qResolver.GetBookByIsbn(context.Background(), expectedISBN_13)
	// if err != nil {
	// 	t.Errorf("GetBookByISBN failed: %v", err)
	// }
	// // trigger fail when retrieved book has incorrect ISBN_13
	// if book.Isbn_13 != expectedISBN_13 {
	// 	t.Errorf("Retrieved book has incorrect isbn_13. Actual: %[1]v \n Expected: %[2]v \n", book.ID, expectedISBN_13)
	// }

	// // same as above, just with incorrect isbn_10 number to check searching for isbn_10
	// unexpectedISBN_13 := 1525303899
	// book2, err2 := qResolver.GetBookByIsbn(context.Background(), unexpectedISBN_13)
	// // Error when getBookByISBN fails
	// if err2 != nil {
	// 	t.Errorf("GetBookByISBN failed: %v", err2)
	// }
	// // trigger fail when retrieved book has incorrect ISBN_10
	// // should be triggered after checking for isbn_13
	// var isbn10_test = strconv.Itoa(unexpectedISBN_13)
	// if book2.Isbn_10 != isbn10_test {
	// 	t.Errorf("Retrieved book has incorrect isbn_10. Actual: %[1]v \n Expected: %[2]v \n", book.ID, isbn10_test)
	// }
}
