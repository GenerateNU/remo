package graph

// query {
//   getBookByISBN(isbn: 9781525303890) {
//     id
//     isbn_13
//     title
//     author
//   }
// }
//   https://a75d-155-33-134-27.ngrok.io -> ngrok http 8080
// postman URL: https://4d49-155-33-132-61.ngrok.io/query
import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"testing"
)

// the url generated by ngrok. Needs to be refreshed every hour
var queryEndpointURL = "https://ea01-155-33-132-61.ngrok.io"

// TESTS NEEDED
// accurate get requests
// accurate post requests

// test for getting books by ISBN request
// technically a POST request because we're sending a JSON, but performs the function of a GET request
func TestAPIGetBookByISBN(t *testing.T) {

	// below request and response JSONs were collected from postman
	query := `query {
		getBookByISBN(isbn: 9781525303890) {
			isbn_13
			id
			author
			num_pages
		}
	}`

	request := struct {
		Query string `json:"query"`
	}{Query: query}

	requestBody, err := json.Marshal(request)
	if err != nil {
		t.Errorf("Unable to marshal request into JSON: %q", err)
	}

	response, err := http.Post(queryEndpointURL, "application/json", bytes.NewBuffer(requestBody))
	if err != nil {
		t.Errorf("Unable to complete POST request properly: %q", err)
	}

	defer response.Body.Close()

	var result map[string]interface{}

	err = json.NewDecoder(response.Body).Decode(&result)

	if err != nil {
		t.Errorf("Unable to decode request from JSON: %q", err)
	}

	fmt.Println(result)
}

func TestAPICreateBook(t *testing.T) {

	// below request and response JSONs were collected from postman
	// mutation query request

	//************************************************************
	// INCOMPLETE. MUST FINISH QUERY - MAKE SURE BOOK INPUT IS PROPERLY FORMATTED
	// ASK CHATGPT OR BOOT UP PLAYGROUND

	query := `query {
		createBook(isbn: ) {
			
		}
	}`

	request := struct {
		Query string `json:"query"`
	}{Query: query}

	requestBody, err := json.Marshal(request)
	if err != nil {
		t.Errorf("Unable to marshal request into JSON: %q", err)
	}

	response, err := http.Post(queryEndpointURL, "application/json", bytes.NewBuffer(requestBody))
	if err != nil {
		t.Errorf("Unable to complete POST request properly: %q", err)
	}

	defer response.Body.Close()

	var result map[string]interface{}

	err = json.NewDecoder(response.Body).Decode(&result)

	if err != nil {
		t.Errorf("Unable to decode request from JSON: %q", err)
	}

	fmt.Println(result)
}
